# Configuración de servidores
# ====================

# Nodo por defecto
# ----------------
#
dummy:V:	htc_computo renombrar_git log	usuarios java monitoring autofs
	echo "nothing to do"

# Nodos con condiciones particulares
#
castillo:V:	compartir_fs htc_submit log java apt_castillo monitoring autofs
warwick:V:	compartir_fs renombrar_git log	usuarios java monitoring
notron:V:	compartir_fs htc_computo log usuarios java monitoring autofs
indra:V:	compartir_fs htc_computo log usuarios java monitoring autofs
ibm1:V:		apt_computo apt_ldap apt_fai htc_master log usuarios java dns monitoring autofs

# Clases de configuración
# =======================

# Configuración de almacenamiento en red.
#
compartir_fs:V:	 /var/lib/cluster/compartido	apt_almacenamiento
monitoring:V:	/var/lib/cluster/monitoring

# Configuración del perfil de la cola de trabajo
# ----------------------------------------------
#
# **Las clases htc_% son mutuamente excluyentes.**
#
htc_computo:V:	/var/lib/cluster/htc_computo
htc_submit:V:	/var/lib/cluster/htc_submit
htc_master:V:	/var/lib/cluster/htc_master

# Configuración inicial de los servidores
# ---------------------------------------
#
port_mirror:V:	 /var/lib/cluster/port_mirror
condor_init:V:	server_init /var/lib/cluster/condor_init
server_init:V:	/var/lib/cluster/server_init	locale
renombrar_git:V: /var/lib/cluster/renombrar_git
locale:V:	 /var/lib/cluster/locale
log:V:	/var/log/journal

# Configuración de software.
#
apt_computo:V:	/var/lib/cluster/apt_computo	java
apt_%:V:	 /var/lib/cluster/apt_%
pip:V:	/var/log/pip
java:V:	/var/lib/cluster/java

force_update:V:	 /var/lib/cluster/force_update

# Configuración inicial
# =====================

# Configurar interfaz de red virtual para aprovechar el máximo ancho de banda
# que permite la configuración de red de cada nodo.
#
/var/lib/cluster/port_mirror: /var/lib/cluster/repo_cluster renombrar_git
	set -x
	apt update
	apt install ifenslave
	if [ `grep "bonding" /etc/modules | wc -l` -eq 0 ]; then
		echo "bonding" | sudo tee -a /etc/modules
	fi
	case `hostname` in
		"ibm"* )
			cp '/etc/cluster/network/interfaces.ibm' '/etc/network/interfaces'
		;;
		"dell"* )
			cp '/etc/cluster/network/interfaces.dell' '/etc/network/interfaces'
		;;
		"indra" )
                        cp '/etc/cluster/network/interfaces.dell' '/etc/network/interfaces'
                ;;
	esac
	etckeeper commit -m 'Terminada la configuración del port mirror.' || true \
	&& mkdir -p `dirname $target` \
	&& sudo modprobe bonding \
	&& touch $target \
	&& reboot

# Configuración de idioma
#
/var/lib/cluster/locale: /etc/cluster/locales/timezone /etc/cluster/locales/locale.gen /etc/cluster/locales/default/locale
	set -x
	cp '/etc/cluster/locales/timezone' '/etc/timezone' \
	&& dpkg-reconfigure -f noninteractive tzdata \
	&& cp '/etc/cluster/locales/locale.gen' '/etc/locale.gen' \
	&& cp '/etc/cluster/locales/default/locale' '/etc/default/locale' \
	&& locale-gen \
	&& dpkg-reconfigure --frontend=noninteractive locales \
	&& update-locale \
	&& etckeeper commit -m 'Terminada la actualización de locale (timezone + lang).' || true \
	&& touch $target

/var/lib/cluster/force_update: /etc/cluster/force_update
	set -x
	etckeeper commit -m 'Guarda de estado previo a la actualización forzada.' || true \
	&& /etc/cluster/scripts/auto-update.sh \
	&& etckeeper commit -m 'Terminada la actualización forzada.' || true \
	&& /etc/cluster/scripts/clean-kernel.sh \
	&& etckeeper commit -m 'Terminada la limpieza de kernel forzada.' || true \
	&& touch $target

/var/lib/cluster/renombrar_git:
	set -x
	etckeeper vcs branch -m `hostname` \
	&& mkdir -p `dirname $target` \
	&& touch $target

# Desinstalar los paquetes en /etc/cluster/apt/%-
# e instalar los de /etc/cluster/apt/%
#
/var/lib/cluster/apt_%:	/etc/cluster/apt/%	/etc/cluster/apt/%-
	set -x
	mkdir -p `dirname $target` \
	&& apt-get update \
	&& apt-get -y purge `cat '/etc/cluster/apt/'$stem'-'` \
	&& apt-get -y \
		install `cat '/etc/cluster/apt/'$stem` \
	&& touch $target \
	&& etckeeper commit -m 'Se instalan los paquetes de apt_ X requeridos.' || true

/var/log/pip: /etc/cluster/pip/upgrade
	set -x
	mkdir -p `dirname $target` \
	&& etckeeper commit -m 'Guarda de estado previo a la actualización de paquetes de pip.' || true \
        && apt-get update \
	&& apt-get -y install python-pip \
	&& pip install --upgrade `cat '/etc/cluster/pip/upgrade'` \
	&& touch $target \
	&& etckeeper commit -m 'Instalar paquetes usando pip.' || true

/var/lib/cluster/repo_cluster:
	set -x
	apt-key add /etc/cluster/supercomputo.asc \
	&& etckeeper commit -m 'Agregado key de repo supercómputo de INMEGEN.' || true \
	&& apt update \
	&& mkdir -p `dirname $target` \
	&& touch $target

/var/lib/cluster/htc_%:	/etc/cluster/condor_nodes/00node_%	condor_init	/etc/condor/config.d/01_general
	set -x
	rm -f /var/lib/cluster/htc_* /etc/condor/config.d/00node_*
	cp '/etc/cluster/condor_nodes/00node_'$stem '/etc/condor/config.d/00node_'$stem \
	&& chown condor:root /etc/condor/condor.key /etc/condor/condor.crt \
	&& chown -R condor:condor /var/lib/condor/ /var/run/condor/ /var/log/condor/ /var/lock/condor/ \
	&& chmod 440 /etc/condor/condor.key /etc/condor/condor.crt \
	&& etckeeper commit -m 'Configuración de nodo de condor correspondiente.' || true \
	&& sudo /etc/init.d/condor restart \
	&& touch $target

/var/lib/cluster/condor_init:
	set -x
	sudo apt-get -y install docker.io condor \
	&& service docker restart \
	&& sudo chown -R condor:condor /var/log/condor/ /var/lock/condor /var/run/condor/ /var/lib/condor \
	&& service condor restart \
	&& touch $target

# Los sistemas de archivos que cada nodo exporta por NFS
# se configuran en `cluster/nfs_exports`.
#
/var/lib/cluster/compartido:	/etc/exports
	set -x
	etckeeper commit -m 'Generar configuración para compartir sistemas de archivos.' || true \
	&& mkdir -p `dirname $target` \
	&& touch /var/lib/cluster/compartido

# Generar las entradas a exportar por nfs usando la información del clúster.
#
/etc/exports:	/etc/cluster/nfs_exports
	set -x
	grep -E '^'`hostname`':' $prereq \
	| sed -e 's#^'`hostname`':##' \
	> $target.build \
	&& mv $target.build $target
	exportfs -a

# Activar los logs persistentes en el sistema.
#
/var/log/journal:
	mkdir -p /var/log/journal
	systemd-tmpfiles --create --prefix /var/log/journal
	systemctl restart systemd-journald

# Sincronizar los usuarios desde castillo.cluster.inmegen.gob.mx
#
usuarios:V:
	set -x
	etckeeper commit -m 'Antes de sincronizar usuarios.' || true
	etckeeper vcs fetch origin castillo
	etckeeper vcs checkout remotes/origin/castillo --  /etc/passwd /etc/shadow /etc/group /etc/gshadow
	etckeeper init
	etckeeper commit -m 'Sincronizar usuarios.' || true

# Instalar oracle-java sin intervanción humana.
# Es necesario deshabilitar el proxy durante la instalación.
#
/var/lib/cluster/java:
	set -x
	etckeeper commit -m 'Antes de instalar oracle-java8.' || true \
	&& mv /etc/apt/apt.conf.d/90-apt-proxy /tmp/ \
	&& add-apt-repository ppa:webupd8team/java \
	&& apt-get update \
	&& echo "oracle-java8-installer shared/accepted-oracle-license-v1-1 select true" | sudo debconf-set-selections \
	&& apt-get install -y oracle-java8-installer oracle-java8-set-default \
	&& mv /tmp/90-apt-proxy /etc/apt/apt.conf.d/ \
	&& etckeeper commit -m 'Después de instalar oracle-java8.' || true \
	&& touch $target

# Configurar git para evitar problemas con etckeeper.
#
/var/lib/cluster/server_init:
	etckeeper vcs config user.name 'Auto commit' \
	&& etckeeper vcs config user.email cluster@inmegen.gob.mx \
	&& etckeeper vcs config push.default simple \
	&& touch $target

# DNS
# ===
#
# La configuración del DNS se genera automáticamente
# a partir de la información del DHCP.
#
# Esta es una operación de mantenimiento y debe ejecutarse cada hora
# en el nodo asignado como DNS del clúster.
#
dns:
	# Actualizar la configuración del DNS completa
	# sin importar que los prerequisitos estén actualizados o no.
	#
	/usr/lib/plan9/bin/mk \
		-f /etc/cluster/mkfile \
		-a /etc/tinydns/root/data.cbd \
	&& svc -t /etc/service/dnscache

# Generar `/etc/hosts` a partir del log del DHCP.
#
/etc/hosts:
	/etc/cluster/scripts/dhcp-2-hosts \
	> "$target"'.build' \
	&& mv "$target"'.build' "$target"

# Generar la configuración del DNS a partir de la información de hosts.
#
/etc/tinydns/root/data:	/etc/hosts
	/etc/cluster/scripts/hosts-2-tinydns \
		"$prereq" \
	> "$target"'.build' \
	&& mv "$target"'.build' "$target"

# Actualizar la configuración del DNS.
#
/etc/tinydns/root/data.cbd:	/etc/tinydns/root/data
	cd /etc/tinydns/root
	/usr/bin/tinydns-data


# Monitoreo
# =========
#
# Se configuraron en `apt/computo` los requisitos para el monitoreo.
# Se agregaron los archivos necesarios para la configuración del monitoreo.
#
# Si cualquiera de los archivos de configuración cambia,
# reiniciar el servicio `nagios-nrpe-server`:
#
/var/lib/cluster/monitoring:	/etc/nagios/nrpe.cfg /etc/nagios/nrpe.d/plugins.cfg
	apt-get -y install nagios-nrpe-server
	systemctl restart nagios-nrpe-server \
	&& touch $target


# Automontado
# ===========
#
# Se genera el mapa de automontaje quitando el nodo donde se ejecuta el proceso
# del archivo `/etc/cluster/automount/direct.map`.
#
autofs:V:	/var/lib/cluster/autofs

/var/lib/cluster/autofs:	/etc/auto.master.d/direct.map
	systemctl enable autofs || true
	systemctl restart autofs \
	&& touch ${target}

/etc/auto.master.d/direct.map:	/etc/cluster/automount/direct.map
	TMPFILE=$(mktemp ${target}.XXXXXX)
	remove-self-references \
		$prereq \
	> ${TMPFILE} \
	&& mv ${TMPFILE} ${target}


# Test
# ====
#
# There should be a test environment to run unit tests.
#
# This is constructed as a docker machine, using pristine ubuntu.
test:V:
	docker build \
		-t cluster-initial \
		docker/test-init
	docker run \
		--dns 10.0.1.78 \
		--dns 192.168.105.220 \
		cluster-initial:latest \
		/root/configurar-nodo-computo.sh
